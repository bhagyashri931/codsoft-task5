Task 5: Contact book
import tkinter as tk
from tkinter import simpledialog, messagebox

class ContactBook:
    def __init__(self):
        self.contacts = []

    def add_contact(self, name, phone, email, address):
        self.contacts.append({'name': name, 'phone': phone, 'email': email, 'address': address})

    def view_contacts(self):
        return self.contacts

    def search_contact(self, search_term):
        results = [contact for contact in self.contacts if search_term.lower() in contact['name'].lower() or search_term in contact['phone']]
        return results

    def update_contact(self, index, name=None, phone=None, email=None, address=None):
        if 0 <= index < len(self.contacts):
            if name:
                self.contacts[index]['name'] = name
            if phone:
                self.contacts[index]['phone'] = phone
            if email:
                self.contacts[index]['email'] = email
            if address:
                self.contacts[index]['address'] = address

    def delete_contact(self, index):
        if 0 <= index < len(self.contacts):
            self.contacts.pop(index)

def add_contact_gui():
    name = simpledialog.askstring("Input", "Enter name:")
    phone = simpledialog.askstring("Input", "Enter phone number:")
    email = simpledialog.askstring("Input", "Enter email:")
    address = simpledialog.askstring("Input", "Enter address:")
    if name and phone and email and address:
        contact_book.add_contact(name, phone, email, address)
        messagebox.showinfo("Info", "Contact added successfully!")
    else:
        messagebox.showwarning("Warning", "All fields are required!")

def view_contacts_gui():
    contacts = contact_book.view_contacts()
    contacts_str = "\n".join([f"{i + 1}. {contact['name']} - {contact['phone']}" for i, contact in enumerate(contacts)])
    messagebox.showinfo("Contacts", contacts_str)

def search_contact_gui():
    search_term = simpledialog.askstring("Input", "Enter name or phone number to search:")
    results = contact_book.search_contact(search_term)
    results_str = "\n".join([f"{contact['name']} - {contact['phone']}" for contact in results])
    messagebox.showinfo("Search Results", results_str if results else "No contacts found.")

def update_contact_gui():
    index = simpledialog.askinteger("Input", "Enter contact number to update:") - 1
    if 0 <= index < len(contact_book.contacts):
        name = simpledialog.askstring("Input", "Enter new name (leave blank to keep current):")
        phone = simpledialog.askstring("Input", "Enter new phone number (leave blank to keep current):")
        email = simpledialog.askstring("Input", "Enter new email (leave blank to keep current):")
        address = simpledialog.askstring("Input", "Enter new address (leave blank to keep current):")
        contact_book.update_contact(index, name, phone, email, address)
        messagebox.showinfo("Info", "Contact updated successfully!")
    else:
        messagebox.showerror("Error", "Invalid contact number.")

def delete_contact_gui():
    index = simpledialog.askinteger("Input", "Enter contact number to delete:") - 1
    if 0 <= index < len(contact_book.contacts):
        contact_book.delete_contact(index)
        messagebox.showinfo("Info", "Contact deleted successfully!")
    else:
        messagebox.showerror("Error", "Invalid contact number.")

def main_gui():
    root = tk.Tk()
    root.title("Contact Book")

    tk.Button(root, text="Add Contact", command=add_contact_gui).pack(pady=10)
    tk.Button(root, text="View Contacts", command=view_contacts_gui).pack(pady=10)
    tk.Button(root, text="Search Contact", command=search_contact_gui).pack(pady=10)
    tk.Button(root, text="Update Contact", command=update_contact_gui).pack(pady=10)
    tk.Button(root, text="Delete Contact", command=delete_contact_gui).pack(pady=10)
    tk.Button(root, text="Exit", command=root.quit).pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    contact_book = ContactBook()
    main_gui()

            
       
